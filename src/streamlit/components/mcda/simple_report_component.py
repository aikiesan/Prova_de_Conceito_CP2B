# Simple CP2B Property Report Component
# Relat√≥rio simples e funcional com foco em objetividade e UX

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

def render_simple_property_report(property_data: Dict[str, Any], radius: str = '30km') -> None:
    """Relat√≥rio completo e bem estruturado da propriedade"""
    try:
        if not property_data:
            st.error("‚ùå Dados da propriedade n√£o encontrados")
            return

        # Header com estilo
        st.markdown("""
        <div style='background: linear-gradient(135deg, #2c5530 0%, #4a7c59 100%); 
                    color: white; padding: 20px; border-radius: 10px; margin-bottom: 30px;'>
            <h1 style='margin: 0; color: white;'>üìä Relat√≥rio de Viabilidade - Planta de Biog√°s</h1>
        </div>
        """, unsafe_allow_html=True)
        
        # Info b√°sica em cards
        cod_imovel = property_data.get('cod_imovel', 'N/A')
        area_ha = property_data.get('AREA_HA', 0)
        municipio = property_data.get('municipio', 'N/A')
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìç C√≥digo", cod_imovel)
        with col2:
            st.metric("üèòÔ∏è Munic√≠pio", municipio)
        with col3:
            st.metric("üìê √Årea", f"{area_ha:.1f} ha")
        with col4:
            st.metric("üéØ Cen√°rio", radius)
        
        st.markdown("---")
        
        # Scores principais com gr√°ficos
        st.markdown("## üéØ An√°lise MCDA Completa")
        
        # Obter e processar scores
        mcda_score = min(max(property_data.get('mcda_score', 0), 0), 100)
        biomass_score = min(max(property_data.get('biomass_score', 0), 0), 100)
        infra_score = property_data.get('infrastructure_score', 0)
        restriction_score = property_data.get('restriction_score', 0)
        
        # Recalcular score de infraestrutura se necess√°rio (processo silencioso)
        if infra_score == 0:
            distances = {
                "rodovias_federais": property_data.get('dist_rodovias_federais_km', 999),
                "rodovias_estaduais": property_data.get('dist_rodovias_estaduais_km', 999),
                "subestacoes": property_data.get('dist_subestacoes_km', 999),
                "gasodutos": property_data.get('dist_gasodutos_km', 999),
                "linhas_transmissao": property_data.get('dist_linhas_transmissao_km', 999)
            }
            
            weights = {
                "rodovias_federais": 0.25,
                "rodovias_estaduais": 0.20,
                "subestacoes": 0.20,
                "gasodutos": 0.20,
                "linhas_transmissao": 0.15
            }
            
            total_score = 0
            valid_items = 0
            
            for infra_type, distance in distances.items():
                if distance > 0 and distance < 200:
                    individual_score = max(0, min(100, 100 * (1 - distance / 50)))
                    weighted_score = individual_score * weights[infra_type]
                    total_score += weighted_score
                    valid_items += 1
            
            if valid_items > 0:
                infra_score = total_score
        
        infra_score = min(max(infra_score, 0), 100)
        
        # Corrigir restriction score
        if restriction_score <= 10:
            restriction_final = ((10 - restriction_score) / 10) * 100
        else:
            restriction_final = min(max(100 - restriction_score, 0), 100)
        
        # Gr√°fico de radar dos scores
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Dados para o gr√°fico radar
            categories = ['Biomassa', 'Infraestrutura', 'Restri√ß√µes<br>(Invertidas)', 'Score MCDA']
            values = [biomass_score, infra_score, restriction_final, mcda_score]
            
            fig_radar = go.Figure()
            fig_radar.add_trace(go.Scatterpolar(
                r=values,
                theta=categories,
                fill='toself',
                name='Scores',
                line_color='rgb(46, 139, 87)',
                fillcolor='rgba(46, 139, 87, 0.3)'
            ))
            
            fig_radar.update_layout(
                polar=dict(
                    radialaxis=dict(visible=True, range=[0, 100], dtick=20)
                ),
                showlegend=False,
                title="An√°lise Radar dos Componentes MCDA",
                height=400
            )
            
            st.plotly_chart(fig_radar, use_container_width=True, config={'displayModeBar': False})
        
        with col2:
            # M√©tricas principais
            st.metric("üéØ Score MCDA", f"{mcda_score:.1f}/100", delta=None)
            st.metric("üå± Biomassa", f"{biomass_score:.1f}/100", delta=None)
            st.metric("üèóÔ∏è Infraestrutura", f"{infra_score:.1f}/100", delta=None)
            st.metric("üõ°Ô∏è Restri√ß√µes", f"{restriction_final:.1f}/100", delta=None)
        
        # Classifica√ß√£o com gauge
        st.markdown("## üìà Classifica√ß√£o de Viabilidade")
        
        if mcda_score >= 70:
            classification = "üü¢ **EXCELENTE**"
            description = "Altamente recomendado para implementa√ß√£o"
            color = "#28a745"
        elif mcda_score >= 60:
            classification = "üü° **BOA**"
            description = "Recomendado com algumas ressalvas t√©cnicas"
            color = "#ffc107"
        elif mcda_score >= 50:
            classification = "üü† **MODERADA**"
            description = "Vi√°vel com investimentos em infraestrutura"
            color = "#fd7e14"
        else:
            classification = "üî¥ **BAIXA**"
            description = "N√£o recomendado nas condi√ß√µes atuais"
            color = "#dc3545"
            
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # Gauge do score
            fig_gauge = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = mcda_score,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': f"Score MCDA<br>({radius})"},
                gauge = {
                    'axis': {'range': [0, 100], 'dtick': 20},
                    'bar': {'color': color, 'thickness': 0.3},
                    'bgcolor': "white",
                    'borderwidth': 2,
                    'bordercolor': "gray",
                    'steps': [
                        {'range': [0, 50], 'color': "#ffe6e6"},
                        {'range': [50, 70], 'color': "#fff3cd"},
                        {'range': [70, 100], 'color': "#d4edda"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 50
                    }
                }
            ))
            
            fig_gauge.update_layout(height=300, margin=dict(l=0, r=0, t=40, b=0))
            st.plotly_chart(fig_gauge, use_container_width=True, config={'displayModeBar': False})
            
        with col2:
            st.markdown(f"### {classification}")
            st.markdown(f"**{description}**")
            
            # Progress bars para componentes
            st.markdown("**Contribui√ß√µes por Componente:**")
            components = [
                ("Biomassa (40%)", biomass_score, "#2E8B57"),
                ("Infraestrutura (35%)", infra_score, "#4169E1"),
                ("Restri√ß√µes (25%)", restriction_final, "#DC143C")
            ]
            
            for name, score, color in components:
                st.markdown(f"**{name}:** {score:.1f}/100")
                progress_val = min(max(score/100, 0.0), 1.0)
                st.progress(progress_val)
        
        st.markdown("---")
        
        # Disponibilidade de res√≠duos
        st.markdown("## üåæ Disponibilidade de Res√≠duos")
        
        # Estimativas de res√≠duos baseadas na √°rea da propriedade
        # Valores m√©dios para regi√£o de Campinas
        residues_data = {
            "üåΩ Cana-de-a√ß√∫car": {
                "area_pct": 0.40,  # 40% da propriedade
                "yield_ton_ha": 85,  # toneladas/ha
                "residue_pct": 0.28  # 28% de res√≠duos
            },
            "üçä Citros": {
                "area_pct": 0.15,
                "yield_ton_ha": 25,
                "residue_pct": 0.15
            },
            "üêÑ Bovinos": {
                "area_pct": 0.25,  # √°rea de pastagem
                "animals_per_ha": 1.5,
                "residue_ton_animal": 15
            },
            "üåΩ Milho/Soja": {
                "area_pct": 0.20,
                "yield_ton_ha": 8,
                "residue_pct": 0.22
            }
        }
        
        # Calcular res√≠duos primeiro (para uso global)
        residue_summary = []
        total_residues = 0
        
        for source, params in residues_data.items():
            source_area = area_ha * params['area_pct']
            
            if "animals_per_ha" in params:  # Pecu√°ria
                animals = source_area * params['animals_per_ha']
                residue_ton = animals * params['residue_ton_animal']
            else:  # Agricultura
                production = source_area * params['yield_ton_ha']
                residue_ton = production * params['residue_pct']
            
            total_residues += residue_ton
            
            residue_summary.append({
                "Fonte": source,
                "√Årea (ha)": f"{source_area:.1f}",
                "Res√≠duos (t/ano)": f"{residue_ton:.0f}"
            })
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìä Estimativa de Res√≠duos por Fonte")
            df_residues = pd.DataFrame(residue_summary)
            st.dataframe(df_residues, use_container_width=True, hide_index=True)
            
        with col2:
            st.markdown("### üìà Totais Estimados")
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("üèûÔ∏è √Årea Total", f"{area_ha:.1f} ha")
                st.metric("üì¶ Total de Res√≠duos", f"{total_residues:.0f} t/ano")
                
            with col_b:
                residue_per_ha = total_residues / area_ha if area_ha > 0 else 0
                st.metric("üìä Densidade", f"{residue_per_ha:.1f} t/ha/ano")
                
                # Classifica√ß√£o do potencial
                if residue_per_ha > 20:
                    potential_class = "üü¢ Alto"
                elif residue_per_ha > 10:
                    potential_class = "üü° Moderado"
                else:
                    potential_class = "üü† Baixo"
                    
                st.metric("‚≠ê Potencial", potential_class)
            
            # Composi√ß√£o dos res√≠duos
            st.markdown("**Composi√ß√£o dos Res√≠duos:**")
            for source, params in residues_data.items():
                pct = (area_ha * params['area_pct'] / area_ha * 100) if area_ha > 0 else 0
                st.write(f"‚Ä¢ {source}: {pct:.0f}% da √°rea")
            
        st.markdown("---")
        
        # An√°lise detalhada de infraestrutura
        st.markdown("## üõ£Ô∏è An√°lise de Infraestrutura")
        
        infra_items = [
            ("üõ£Ô∏è Rodovias Federais", property_data.get('dist_rodovias_federais_km', 0), property_data.get('dist_rodovias_federais_km_score', 0)),
            ("üõ§Ô∏è Rodovias Estaduais", property_data.get('dist_rodovias_estaduais_km', 0), property_data.get('dist_rodovias_estaduais_km_score', 0)),
            ("‚ö° Subesta√ß√µes", property_data.get('dist_subestacoes_km', 0), property_data.get('dist_subestacoes_km_score', 0)),
            ("üî• Gasodutos", property_data.get('dist_gasodutos_km', 0), property_data.get('dist_gasodutos_km_score', 0)),
            ("üì° Linhas Transmiss√£o", property_data.get('dist_linhas_transmissao_km', 0), property_data.get('dist_linhas_transmissao_km_score', 0))
        ]
        
        # Tabela de infraestrutura (foco em dist√¢ncias)
        infra_data = []
        for name, distance, score in infra_items:
            if distance > 0 and distance < 200:  # Dist√¢ncias v√°lidas
                # Status mais detalhado com explica√ß√µes
                if distance <= 2:
                    status = "üü¢ **EXCELENTE** (<2km)"
                    description = "Muito pr√≥ximo - custos baixos"
                elif distance <= 5:
                    status = "üü¢ **BOM** (2-5km)"
                    description = "Pr√≥ximo - vi√°vel economicamente"
                elif distance <= 10:
                    status = "üü° **MODERADO** (5-10km)"
                    description = "Razo√°vel - custos moderados"
                elif distance <= 20:
                    status = "üü† **DISTANTE** (10-20km)"
                    description = "Longe - custos elevados"
                else:
                    status = "üî¥ **MUITO DISTANTE** (>20km)"
                    description = "Muito longe - custos proibitivos"
                    
                infra_data.append({
                    "üèóÔ∏è Infraestrutura": name,
                    "üìè Dist√¢ncia": f"{distance:.1f} km",
                    "üìä Avalia√ß√£o": status,
                    "üí≠ Impacto": description
                })
        
        if infra_data:
            df_infra = pd.DataFrame(infra_data)
            st.dataframe(df_infra, use_container_width=True, hide_index=True)
            
# Gr√°fico de dist√¢ncias removido - tabela √© suficiente
        else:
            st.warning("‚ö†Ô∏è Dados de infraestrutura n√£o dispon√≠veis ou inv√°lidos")
            
        st.markdown("---")
        
        # An√°lise de restri√ß√µes ambientais
        st.markdown("## üõ°Ô∏è An√°lise de Restri√ß√µes Ambientais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üìä Score de Restri√ß√£o", f"{restriction_final:.1f}/100")
            st.caption("100 = sem restri√ß√µes, 0 = muitas restri√ß√µes")
            
            # Interpreta√ß√£o das restri√ß√µes
            if restriction_final >= 80:
                rest_status = "üü¢ **BAIXO RISCO**"
                rest_desc = "Poucas restri√ß√µes ambientais"
            elif restriction_final >= 60:
                rest_status = "üü° **RISCO MODERADO**" 
                rest_desc = "Algumas restri√ß√µes manej√°veis"
            elif restriction_final >= 40:
                rest_status = "üü† **RISCO ALTO**"
                rest_desc = "V√°rias restri√ß√µes importantes"
            else:
                rest_status = "üî¥ **RISCO MUITO ALTO**"
                rest_desc = "Muitas restri√ß√µes cr√≠ticas"
                
            st.markdown(f"{rest_status}")
            st.caption(rest_desc)
            
        with col2:
            st.markdown("### üåç Fatores de Restri√ß√£o Avaliados")
            
            restriction_factors = [
                "üå≥ **Unidades de Conserva√ß√£o**",
                "üèõÔ∏è **Terras Ind√≠genas**", 
                "üèôÔ∏è **√Åreas Urbanas**",
                "‚úàÔ∏è **Aeroportos (seguran√ßa)**",
                "üíß **Corpos d'√°gua**",
                "‚õ∞Ô∏è **Declividade do terreno**",
                "ü¶Ö **√Åreas de prote√ß√£o ambiental**"
            ]
            
            for factor in restriction_factors:
                st.markdown(f"‚Ä¢ {factor}")
                
        # Explica√ß√£o t√©cnica
        with st.expander("‚ÑπÔ∏è Como s√£o calculadas as restri√ß√µes"):
            st.markdown("""
            **Metodologia de C√°lculo:**
            
            O score de restri√ß√µes considera a proximidade e sobreposi√ß√£o com:
            
            - **Zonas de amortecimento** de unidades de conserva√ß√£o (buffer de 1-5km)
            - **Dist√¢ncia m√≠nima** de √°reas urbanas (>2km recomendado)
            - **Restri√ß√µes aeroportu√°rias** (zonas de seguran√ßa da avia√ß√£o)
            - **Corpos d'√°gua** e √°reas de preserva√ß√£o permanente
            - **Declividade** superior a 15% (limita√ß√£o t√©cnica)
            - **Sobreposi√ß√£o** com terras ind√≠genas ou quilombolas
            
            **Score final:** Combina todos os fatores em uma escala de 0-100, onde valores mais altos indicam menor restri√ß√£o ambiental.
            """)
        
        # Recomenda√ß√µes b√°sicas
        st.markdown("---")
        
        st.markdown("## üí° Recomenda√ß√µes T√©cnicas")
        
        recommendations = []
        
        if mcda_score >= 70:
            recommendations.append("‚úÖ **Proceder com estudos de viabilidade detalhados**")
            recommendations.append("üìã Elaborar projeto executivo da planta de biog√°s")
        elif mcda_score >= 50:
            recommendations.append("üîç **Realizar estudos complementares de infraestrutura**")
            if infra_score < 30:
                recommendations.append("‚ö° Avaliar custos de conex√£o el√©trica e log√≠stica")
        else:
            recommendations.append("‚ùå **N√£o recomendado** nas condi√ß√µes atuais")
            recommendations.append("üîÑ Considerar outras propriedades com melhor score MCDA")
            
        # Recomenda√ß√µes baseadas nos res√≠duos dispon√≠veis
        if total_residues > 5000:
            recommendations.append("üè≠ Alto volume de res√≠duos - Potencial para planta de grande porte")
        elif total_residues > 1000:
            recommendations.append("üè¢ Volume moderado - Adequado para planta de m√©dio porte")
        elif total_residues > 200:
            recommendations.append("üè† Volume baixo - Vi√°vel para micro planta")
            
        for rec in recommendations:
            st.markdown(rec)
        
        # Bot√£o voltar
        if st.button("‚¨ÖÔ∏è Voltar ao Mapa", type="primary", use_container_width=True):
            st.session_state.current_page = "mcda"
            st.session_state.current_view = "map"
            st.session_state.cp2b_selected_property = None
            st.rerun()
            
        logger.info(f"‚úÖ Relat√≥rio simples renderizado para {cod_imovel}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao renderizar relat√≥rio simples: {str(e)}")
        st.error(f"Erro: {str(e)}")
        
        # Fallback b√°sico
        st.markdown("## ‚ö†Ô∏è Erro no Relat√≥rio")
        st.write("N√£o foi poss√≠vel carregar os dados completos da propriedade.")
        
        if st.button("‚¨ÖÔ∏è Voltar", type="primary"):
            st.session_state.current_page = "mcda"
            st.rerun()