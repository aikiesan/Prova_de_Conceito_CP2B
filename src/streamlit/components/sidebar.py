"""
Sidebar elaborada com filtros avan√ßados para an√°lise de biog√°s
"""

import streamlit as st
import pandas as pd
from typing import Dict, List, Optional, Any
from utils.database import query_df, MunicipalQueries
import logging

logger = logging.getLogger(__name__)

class SidebarFilters:
    """Classe para gerenciar filtros da sidebar"""
    
    # Mapeamento das fontes de biog√°s com metadados
    BIOGAS_SOURCES = {
        'total_ch4_rsu_rpo': {
            'label': 'RSU + RPO (Res√≠duos Urbanos)',
            'category': 'Urbano',
            'icon': 'üóëÔ∏è',
            'description': 'Res√≠duos S√≥lidos Urbanos e de Poda'
        },
        'biogas_cana': {
            'label': 'Cana-de-a√ß√∫car',
            'category': 'Agr√≠cola',
            'icon': 'üåæ',
            'description': 'Baga√ßo e palha da cana'
        },
        'biogas_soja': {
            'label': 'Soja',
            'category': 'Agr√≠cola', 
            'icon': 'üå±',
            'description': 'Res√≠duos da cultura da soja'
        },
        'biogas_milho': {
            'label': 'Milho',
            'category': 'Agr√≠cola',
            'icon': 'üåΩ',
            'description': 'Res√≠duos da cultura do milho'
        },
        'biogas_cafe': {
            'label': 'Caf√©',
            'category': 'Agr√≠cola',
            'icon': '‚òï',
            'description': 'Polpa e casca do caf√©'
        },
        'biogas_citros': {
            'label': 'Citros',
            'category': 'Agr√≠cola',
            'icon': 'üçä',
            'description': 'Res√≠duos de laranja e lim√£o'
        },
        'biogas_bovino': {
            'label': 'Bovinos',
            'category': 'Pecu√°ria',
            'icon': 'üêÑ',
            'description': 'Esterco bovino'
        },
        'biogas_suinos': {
            'label': 'Su√≠nos',
            'category': 'Pecu√°ria',
            'icon': 'üê∑',
            'description': 'Dejetos de su√≠nos'
        },
        'biogas_aves': {
            'label': 'Aves',
            'category': 'Pecu√°ria',
            'icon': 'üêî',
            'description': 'Dejetos de aves'
        },
        'biogas_piscicultura': {
            'label': 'Piscicultura',
            'category': 'Pecu√°ria',
            'icon': 'üêü',
            'description': 'Res√≠duos da aquicultura'
        }
    }
    
    # Totalizadores
    TOTALS = {
        'total_agricola': {
            'label': 'Total Agr√≠cola',
            'icon': 'üåæ',
            'description': 'Soma de todas as fontes agr√≠colas'
        },
        'total_pecuaria': {
            'label': 'Total Pecu√°ria', 
            'icon': 'üêÑ',
            'description': 'Soma de todas as fontes pecu√°rias'
        },
        'total_final_nm_ano': {
            'label': 'TOTAL GERAL',
            'icon': 'üéØ',
            'description': 'Potencial total de biog√°s do munic√≠pio'
        }
    }

@st.cache_data(ttl=600)
def load_municipalities_for_sidebar() -> pd.DataFrame:
    """Carrega munic√≠pios para dropdown da sidebar com cache"""
    try:
        df = query_df("""
            SELECT cd_mun, nm_mun, total_final_nm_ano 
            FROM municipios 
            ORDER BY nm_mun ASC
        """)
        return df
    except Exception as e:
        logger.error(f"Erro ao carregar munic√≠pios para sidebar: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=600)
def get_filter_statistics() -> Dict[str, Any]:
    """Obt√©m estat√≠sticas para configurar filtros dinamicamente"""
    try:
        stats = MunicipalQueries.get_aggregated_stats()
        return {
            'total_municipalities': stats.get('total_municipalities', 645),
            'min_potential': stats.get('min_biogas_potential', 0),
            'max_potential': stats.get('max_biogas_potential', 1000000),
            'avg_potential': stats.get('avg_biogas_potential', 50000),
            'total_potential': stats.get('total_biogas_potential', 50000000)
        }
    except Exception as e:
        logger.error(f"Erro ao obter estat√≠sticas: {e}")
        return {
            'total_municipalities': 645,
            'min_potential': 0,
            'max_potential': 1000000,
            'avg_potential': 50000,
            'total_potential': 50000000
        }

def render_municipality_selector() -> List[str]:
    """Renderiza seletor de munic√≠pios com busca avan√ßada"""
    
    st.sidebar.header("üéØ Sele√ß√£o de Munic√≠pios")
    
    # Carregar dados
    df_muns = load_municipalities_for_sidebar()
    
    if df_muns.empty:
        st.sidebar.error("Erro ao carregar munic√≠pios")
        return []
    
    # Op√ß√µes de sele√ß√£o
    selection_mode = st.sidebar.radio(
        "Modo de Sele√ß√£o:",
        ["Busca Manual", "Top Munic√≠pios", "Todos"],
        help="Escolha como selecionar os munic√≠pios para an√°lise"
    )
    
    selected_muns = []
    
    if selection_mode == "Busca Manual":
        # Busca com filtro de texto
        search_term = st.sidebar.text_input(
            "üîç Buscar Munic√≠pio:",
            placeholder="Digite parte do nome...",
            help="Busque munic√≠pios por nome"
        )
        
        if search_term:
            # Filtrar munic√≠pios que cont√™m o termo
            filtered_muns = df_muns[
                df_muns['nm_mun'].str.contains(search_term, case=False, na=False)
            ].head(20)  # Limitar a 20 resultados
            
            if not filtered_muns.empty:
                st.sidebar.info(f"Encontrados {len(filtered_muns)} munic√≠pios")
                mun_options = [
                    f"{row['nm_mun']} ({row['cd_mun']}) - {row['total_final_nm_ano']:,.0f} Nm¬≥/ano" 
                    for _, row in filtered_muns.iterrows()
                ]
            else:
                st.sidebar.warning("Nenhum munic√≠pio encontrado")
                mun_options = []
        else:
            # Mostrar todos se n√£o h√° termo de busca
            mun_options = [
                f"{row['nm_mun']} ({row['cd_mun']}) - {row['total_final_nm_ano']:,.0f} Nm¬≥/ano" 
                for _, row in df_muns.head(50).iterrows()  # Limitar a 50 iniciais
            ]
        
        selected_muns = st.sidebar.multiselect(
            "Selecionar Munic√≠pios:",
            mun_options,
            help="Selecione um ou mais munic√≠pios para an√°lise"
        )
    
    elif selection_mode == "Top Munic√≠pios":
        # Sele√ß√£o por ranking
        top_n = st.sidebar.slider(
            "üìä Top N Munic√≠pios:",
            min_value=5,
            max_value=100,
            value=20,
            step=5,
            help="Selecionar os N munic√≠pios com maior potencial"
        )
        
        # Mostrar os top munic√≠pios
        top_muns = df_muns.nlargest(top_n, 'total_final_nm_ano')
        
        selected_muns = [
            f"{row['nm_mun']} ({row['cd_mun']}) - {row['total_final_nm_ano']:,.0f} Nm¬≥/ano"
            for _, row in top_muns.iterrows()
        ]
        
        st.sidebar.success(f"‚úÖ Selecionados top {top_n} munic√≠pios")
    
    else:  # Todos
        st.sidebar.info("üåç Todos os munic√≠pios ser√£o analisados")
        selected_muns = []  # Lista vazia significa "todos"
    
    return selected_muns

def render_potential_filters() -> Dict[str, float]:
    """Renderiza filtros de potencial de biog√°s"""
    
    st.sidebar.header("üìä Filtros de Potencial")
    
    # Obter estat√≠sticas para configurar ranges
    stats = get_filter_statistics()
    
    # Filtro por faixa de potencial total
    st.sidebar.subheader("üéØ Potencial Total (Nm¬≥/ano)")
    
    # Op√ß√µes pr√©-definidas
    preset_ranges = {
        "Todos": (0, stats['max_potential']),
        "Alto (> 100k)": (100000, stats['max_potential']),
        "M√©dio (10k - 100k)": (10000, 100000),
        "Baixo (< 10k)": (0, 10000),
        "Customizado": None
    }
    
    range_preset = st.sidebar.selectbox(
        "Faixa Pr√©-definida:",
        list(preset_ranges.keys()),
        help="Selecione uma faixa comum ou customize"
    )
    
    if range_preset == "Customizado":
        # Slider customizado
        min_val, max_val = st.sidebar.slider(
            "Faixa Customizada:",
            min_value=0.0,
            max_value=float(stats['max_potential']),
            value=(0.0, float(stats['max_potential'])),
            step=1000.0,
            format="%.0f",
            help="Arraste para definir faixa customizada"
        )
    else:
        min_val, max_val = preset_ranges[range_preset]
    
    # Mostrar estat√≠sticas da faixa selecionada
    if range_preset != "Todos":
        st.sidebar.info(f"üìà Faixa: {min_val:,.0f} - {max_val:,.0f} Nm¬≥/ano")
    
    return {"total_min": min_val, "total_max": max_val}

def render_source_filters() -> Dict[str, bool]:
    """Renderiza filtros por fonte de biog√°s"""
    
    st.sidebar.header("üî¨ Fontes de Biog√°s")
    
    # Controles gerais
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        if st.button("‚úÖ Marcar Todas", help="Selecionar todas as fontes"):
            for source in SidebarFilters.BIOGAS_SOURCES.keys():
                st.session_state[f"source_{source}"] = True
    
    with col2:
        if st.button("‚ùå Desmarcar Todas", help="Desselecionar todas as fontes"):
            for source in SidebarFilters.BIOGAS_SOURCES.keys():
                st.session_state[f"source_{source}"] = False
    
    # Organizar por categoria
    categories = {}
    for source_key, source_info in SidebarFilters.BIOGAS_SOURCES.items():
        category = source_info['category']
        if category not in categories:
            categories[category] = []
        categories[category].append((source_key, source_info))
    
    sources_selected = {}
    
    # Renderizar por categoria
    for category, sources in categories.items():
        
        st.sidebar.subheader(f"üìã {category}")
        
        # Controle de categoria
        category_key = f"category_{category.lower()}"
        
        col1, col2 = st.sidebar.columns([3, 1])
        with col1:
            category_label = f"Todas as fontes {category.lower()}s"
        with col2:
            all_category = st.sidebar.checkbox(
                f"Todas as {category.lower()}",
                key=category_key,
                help=f"Selecionar todas as fontes {category.lower()}s"
            )
        
        # Se "todas da categoria" foi marcado/desmarcado
        if all_category:
            for source_key, _ in sources:
                st.session_state[f"source_{source_key}"] = True
        
        # Renderizar checkboxes individuais
        for source_key, source_info in sources:
            # Estado padr√£o: todas marcadas
            default_state = st.session_state.get(f"source_{source_key}", True)
            
            selected = st.sidebar.checkbox(
                f"{source_info['icon']} {source_info['label']}",
                value=default_state,
                key=f"source_{source_key}",
                help=source_info['description']
            )
            
            sources_selected[source_key] = selected
    
    # Resumo das sele√ß√µes
    selected_count = sum(sources_selected.values())
    total_count = len(sources_selected)
    
    if selected_count == 0:
        st.sidebar.error("‚ö†Ô∏è Nenhuma fonte selecionada!")
    elif selected_count == total_count:
        st.sidebar.success(f"‚úÖ Todas as {total_count} fontes selecionadas")
    else:
        st.sidebar.info(f"üìä {selected_count} de {total_count} fontes selecionadas")
    
    return sources_selected

def render_analysis_options() -> Dict[str, Any]:
    """Renderiza op√ß√µes avan√ßadas de an√°lise"""
    
    st.sidebar.header("‚öôÔ∏è Op√ß√µes de An√°lise")
    
    # Modo de c√°lculo do total
    calculation_mode = st.sidebar.radio(
        "üìä Modo de C√°lculo:",
        ["Fontes Selecionadas", "Total Original"],
        help="""
        Fontes Selecionadas: Recalcula total baseado apenas nas fontes marcadas
        Total Original: Usa o valor total original do banco de dados
        """
    )
    
    # Ordena√ß√£o padr√£o
    sort_options = {
        'total_final_nm_ano': 'Potencial Total',
        'nm_mun': 'Nome do Munic√≠pio',
        'total_agricola': 'Total Agr√≠cola', 
        'total_pecuaria': 'Total Pecu√°ria',
        'area_km2': '√Årea (km¬≤)'
    }
    
    sort_by = st.sidebar.selectbox(
        "üîÑ Ordenar Por:",
        list(sort_options.keys()),
        format_func=lambda x: sort_options[x],
        help="Como ordenar os resultados"
    )
    
    sort_ascending = st.sidebar.checkbox(
        "üìà Ordem Crescente",
        value=False,
        help="Marque para ordem crescente, desmarque para decrescente"
    )
    
    # Limite de resultados
    limit_results = st.sidebar.checkbox(
        "üî¢ Limitar Resultados",
        value=False,
        help="Limitar n√∫mero de munic√≠pios exibidos"
    )
    
    max_results = None
    if limit_results:
        max_results = st.sidebar.slider(
            "M√°ximo de Resultados:",
            min_value=10,
            max_value=500,
            value=100,
            step=10
        )
    
    return {
        'calculation_mode': calculation_mode,
        'sort_by': sort_by,
        'sort_ascending': sort_ascending,
        'max_results': max_results
    }

def render_visualization_mode() -> Dict[str, Any]:
    """Controla o modo de visualiza√ß√£o do potencial - vers√£o simplificada"""
    
    st.sidebar.header("üé® Visualiza√ß√£o")
    
    # Informa√ß√£o sobre a legenda interativa
    st.sidebar.info("üìä **Legenda Interativa:** Use a legenda no mapa (canto superior direito) para visualizar estat√≠sticas detalhadas e trocar entre diferentes fontes.")
    
    # Controles b√°sicos
    viz_mode = st.sidebar.radio(
        "Modo de An√°lise:",
        ["Total Geral", "Por Categoria", "Por Fonte Espec√≠fica"],
        help="Escolha o tipo de an√°lise. A legenda no mapa mostrar√° estat√≠sticas espec√≠ficas."
    )
    
    selected_category = None
    selected_source = None
    
    if viz_mode == "Por Categoria":
        selected_category = st.sidebar.selectbox(
            "Categoria:",
            ["Agr√≠cola", "Pecu√°ria", "Urbano"],
            help="Visualizar apenas uma categoria - veja estat√≠sticas na legenda do mapa"
        )
        
        # Mostrar preview das fontes da categoria
        if selected_category == "Agr√≠cola":
            st.sidebar.caption("üåæ Inclui: Cana, Soja, Milho, Caf√©, Citros")
        elif selected_category == "Pecu√°ria":
            st.sidebar.caption("üêÑ Inclui: Bovinos, Su√≠nos, Aves, Piscicultura")
        elif selected_category == "Urbano":
            st.sidebar.caption("üóëÔ∏è Inclui: RSU + RPO")
    
    elif viz_mode == "Por Fonte Espec√≠fica":
        source_options = {
            'biogas_cana': 'üåæ Cana-de-a√ß√∫car',
            'biogas_soja': 'üå± Soja',
            'biogas_milho': 'üåΩ Milho',
            'biogas_bovino': 'üêÑ Bovinos',
            'biogas_cafe': '‚òï Caf√©',
            'biogas_citros': 'üçä Citros',
            'biogas_suinos': 'üê∑ Su√≠nos',
            'biogas_aves': 'üêî Aves',
            'biogas_piscicultura': 'üêü Piscicultura',
            'total_ch4_rsu_rpo': 'üóëÔ∏è RSU + RPO'
        }
        
        selected_source = st.sidebar.selectbox(
            "Fonte Espec√≠fica:",
            list(source_options.keys()),
            format_func=lambda x: source_options[x],
            help="Visualizar apenas uma fonte - estat√≠sticas detalhadas na legenda do mapa"
        )
        
        # Mostrar dica sobre compara√ß√£o
        st.sidebar.caption("üí° Compare diferentes fontes alterando esta sele√ß√£o")
    
    else:  # Total Geral
        st.sidebar.caption("üéØ Visualizando potencial total de biog√°s por munic√≠pio")
    
    return {
        'mode': viz_mode,
        'category': selected_category,
        'source': selected_source
    }

def render_layer_controls() -> Dict[str, bool]:
    """Renderiza controles simplificados de camadas do mapa"""
    
    st.sidebar.header("üó∫Ô∏è Contexto Geogr√°fico")
    
    # Informa√ß√£o sobre controle avan√ßado
    st.sidebar.info("üéõÔ∏è **Controle Avan√ßado:** Use o painel de camadas no mapa para controle individual e detalhado.")
    
    # Controles simplificados
    layers = {}
    
    layers['limite_sp'] = st.sidebar.checkbox(
        "üî¥ Mostrar Limite de SP", 
        value=False,
        help="Adiciona contorno do estado para contexto geogr√°fico"
    )
    
    layers['plantas_biogas'] = st.sidebar.checkbox(
        "üè≠ Mostrar Usinas Existentes", 
        value=False,
        help="Exibe plantas de biog√°s j√° em opera√ß√£o para compara√ß√£o"
    )
    
    layers['regioes_admin'] = st.sidebar.checkbox(
        "üåç Mostrar Regi√µes Admin.", 
        value=False,
        help="Adiciona divis√µes administrativas regionais"
    )
    
    # Status simplificado
    active_count = sum(layers.values())
    if active_count == 0:
        st.sidebar.caption("üìç Visualiza√ß√£o focada nos munic√≠pios")
    elif active_count == 1:
        active_layer = [k for k, v in layers.items() if v][0]
        layer_names = {
            'limite_sp': 'Limite de SP',
            'plantas_biogas': 'Usinas Existentes', 
            'regioes_admin': 'Regi√µes Admin.'
        }
        st.sidebar.caption(f"üìä + {layer_names[active_layer]} para contexto")
    else:
        st.sidebar.caption(f"üìä + {active_count} camadas contextuais ativas")
    
    return layers

def render_export_options() -> Dict[str, bool]:
    """Renderiza op√ß√µes de exporta√ß√£o"""
    
    st.sidebar.header("üì§ Exporta√ß√£o")
    
    export_options = {
        'enable_csv': st.sidebar.checkbox(
            "üìÑ Habilitar Export CSV",
            help="Permite download dos dados filtrados em CSV"
        ),
        'enable_excel': st.sidebar.checkbox(
            "üìä Habilitar Export Excel", 
            help="Permite download em formato Excel"
        ),
        'enable_geojson': st.sidebar.checkbox(
            "üó∫Ô∏è Habilitar Export GeoJSON",
            help="Exporta dados com geometrias para SIG"
        )
    }
    
    if any(export_options.values()):
        st.sidebar.info("‚úÖ Op√ß√µes de exporta√ß√£o estar√£o dispon√≠veis ap√≥s aplicar filtros")
    
    return export_options

def render_sidebar() -> Dict[str, Any]:
    """
    Renderiza sidebar completa e retorna todos os filtros aplicados
    
    Returns:
        Dicion√°rio com todos os filtros e configura√ß√µes selecionadas
    """
    
    # Logo/t√≠tulo da sidebar
    st.sidebar.title("üå± CP2B Filters")
    st.sidebar.markdown("---")
    
    # Se√ß√£o 1: Sele√ß√£o de munic√≠pios
    selected_muns = render_municipality_selector()
    st.sidebar.markdown("---")
    
    # Se√ß√£o 2: Filtros de potencial
    potential_filters = render_potential_filters()
    st.sidebar.markdown("---")
    
    # Se√ß√£o 3: Fontes de biog√°s
    source_filters = render_source_filters()
    st.sidebar.markdown("---")
    
    # Se√ß√£o 4: Controles de camadas do mapa
    layer_controls = render_layer_controls()
    st.sidebar.markdown("---")
    
    # Se√ß√£o 5: Modo de visualiza√ß√£o
    viz_options = render_visualization_mode()
    st.sidebar.markdown("---")
    
    # Se√ß√£o 6: Op√ß√µes de an√°lise
    analysis_options = render_analysis_options()
    st.sidebar.markdown("---")
    
    # Se√ß√£o 7: Op√ß√µes de exporta√ß√£o
    export_options = render_export_options()
    st.sidebar.markdown("---")
    
    # Bot√£o de reset
    if st.sidebar.button("üîÑ Resetar Todos os Filtros", help="Limpa todos os filtros aplicados"):
        # Limpar session state relacionado aos filtros
        for key in list(st.session_state.keys()):
            if key.startswith(('source_', 'category_')):
                del st.session_state[key]
        st.rerun()
    
    # Informa√ß√µes da sess√£o (modo debug)
    if st.sidebar.checkbox("üêõ Modo Debug Sidebar"):
        st.sidebar.subheader("Debug Info")
        st.sidebar.json({
            'selected_municipalities': len(selected_muns),
            'potential_range': f"{potential_filters['total_min']:,.0f} - {potential_filters['total_max']:,.0f}",
            'sources_selected': sum(source_filters.values()),
            'calculation_mode': analysis_options['calculation_mode']
        })
    
    # Compilar todos os filtros
    all_filters = {
        'selected_muns': selected_muns,
        'total_min': potential_filters['total_min'],
        'total_max': potential_filters['total_max'],
        'sources': source_filters,
        'layer_controls': layer_controls,
        'visualization': viz_options,
        'calculation_mode': analysis_options['calculation_mode'],
        'sort_by': analysis_options['sort_by'],
        'sort_ascending': analysis_options['sort_ascending'],
        'max_results': analysis_options['max_results'],
        'export_options': export_options
    }
    
    return all_filters


