// ============================================================================
// CP2B PROJECT - GOOGLE EARTH ENGINE: EXTRA√á√ÉO DE DADOS GEOESPACIAIS
// Responsabilidade: APENAS extrair hectares por cultura e dist√¢ncias
// Processamento ser√° feito no Jupyter Notebook
// ============================================================================

// =============================================================================
// PHASE 1: CONFIGURA√á√ÉO E CARREGAMENTO DE ASSETS
// =============================================================================
print('=== CP2B - EXTRA√á√ÉO DE DADOS GEOESPACIAIS ===');
print('Responsabilidade GEE: Extrair hectares + dist√¢ncias');
print('Processamento: Ser√° feito no Jupyter Notebook');
print('Timestamp:', new Date());
print('');

// Load base datasets
var rmc_boundary = ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/Limites_RMC');
var sicar_polygons = ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/SICAR_RMC_polygons');

// Load MapBiomas para an√°lise de uso do solo
var mapbiomas = ee.Image('projects/mapbiomas-public/assets/brazil/lulc/collection10/mapbiomas_brazil_collection10_coverage_v2')
                  .select('classification_2023')
                  .clip(rmc_boundary);

// Load infrastructure layers
var infrastructure = {
  subestacoes: {
    collection: ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/SE_EXISTENTE'),
    name: 'Subesta√ß√µes El√©tricas'
  },
  linhas_transmissao: {
    collection: ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/LT_EXISTENTE'),
    name: 'Linhas de Transmiss√£o'
  },
  rodovias_federais: {
    collection: ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/rodovia-federal'),
    name: 'Rodovias Federais'
  },
  rodovias_estaduais: {
    collection: ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/rodovia-estadual'),
    name: 'Rodovias Estaduais'
  },
  gasodutos: {
    collection: ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/gasoduto-transporte'),
    name: 'Gasodutos de Transporte'
  },
  gasoduto_distribuicao: {
    collection: ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/gasoduto-distribuicao'),
    name: 'Gasodutos de Distribui√ß√£o'
  },
  aerodromos: {
    collection: ee.FeatureCollection('projects/prova-de-conceito-cp2b/assets/Aerodromos_publicos'),
    name: 'Aer√≥dromos P√∫blicos'
  }
};

// =============================================================================
// PHASE 2: CONFIGURA√á√ÉO DAS CLASSES MAPBIOMAS
// =============================================================================
var landUseClasses = {
  pasture: { class: 15, name: 'Pastagem' },
  sugarcane: { class: 20, name: 'Cana-de-a√ß√∫car' },
  soy: { class: 39, name: 'Soja' },
  rice: { class: 40, name: 'Arroz' },
  coffee: { class: 46, name: 'Caf√©' },  
  citrus: { class: 47, name: 'Citros' },
  other_perennial: { class: 48, name: 'Outras Perenes' },
  other_temp: { class: 41, name: 'Outras Tempor√°rias' }
};

print('üìä Classes MapBiomas configuradas:');
Object.keys(landUseClasses).forEach(function(key) {
  var landUse = landUseClasses[key];
  print('   ‚Ä¢', landUse.name, '- Classe', landUse.class);
});

// =============================================================================
// PHASE 3: FUN√á√ÉO DE EXTRA√á√ÉO DE HECTARES POR BUFFER
// =============================================================================
function extractLandUseAreas(polygon, buffered, bufferSuffix) {
  var results = {};
  
  // Para cada classe de uso do solo, calcular hectares no buffer
  Object.keys(landUseClasses).forEach(function(landUseKey) {
    var landUse = landUseClasses[landUseKey];
    
    // Criar m√°scara para a classe espec√≠fica
    var classMask = mapbiomas.eq(landUse.class);
    
    // Calcular √°rea em pixels e converter para hectares
    var areaPixels = classMask.multiply(ee.Image.pixelArea())
                            .reduceRegion({
                              reducer: ee.Reducer.sum(),
                              geometry: buffered,
                              scale: 30,
                              maxPixels: 1e9
                            });
    
    // Converter de m¬≤ para hectares
    var areaHa = ee.Number(areaPixels.get('classification_2023')).divide(10000);
    
    // Armazenar resultado
    results[landUseKey + '_ha' + bufferSuffix] = areaHa;
  });
  
  // Adicionar √°rea total do buffer
  var totalBufferArea = ee.Number(buffered.area()).divide(10000);
  results['buffer_total_ha' + bufferSuffix] = totalBufferArea;
  
  return results;
}

// =============================================================================
// PHASE 4: FUN√á√ÉO DE C√ÅLCULO DE DIST√ÇNCIAS DE INFRAESTRUTURA  
// =============================================================================
function calculateInfrastructureDistances(polygon) {
  var centroid = polygon.geometry().centroid();
  var distances = {};
  
  Object.keys(infrastructure).forEach(function(infraKey) {
    try {
      // Buscar infraestrutura pr√≥xima (at√© 50km)
      var nearbyInfra = infrastructure[infraKey].collection
        .filterBounds(centroid.buffer(50000))
        .limit(10);
      
      var count = nearbyInfra.size();
      var minDistance = ee.Algorithms.If(
        count.gt(0),
        nearbyInfra.distance(1).reduceRegion({
          reducer: ee.Reducer.min(),
          geometry: centroid,
          scale: 1000
        }).get('distance'),
        999999 // Valor grande se n√£o h√° infraestrutura pr√≥xima
      );
      
      distances['dist_' + infraKey + '_km'] = ee.Number(minDistance).divide(1000);
    } catch (error) {
      distances['dist_' + infraKey + '_km'] = -1; // Erro no c√°lculo
    }
  });
  
  return distances;
}

// =============================================================================
// PHASE 5: PROCESSAMENTO MULTI-DIST√ÇNCIA
// =============================================================================

// Configurar buffers para an√°lise multi-dist√¢ncia
var bufferDistances = {
  '10km': 10000,   // Plantas locais
  '30km': 30000,   // Hub regional (√ìTIMO)
  '50km': 50000    // Escala industrial
};

print('');
print('üéØ INICIANDO EXTRA√á√ÉO MULTI-DIST√ÇNCIA');
print('Cen√°rios configurados:', Object.keys(bufferDistances));

Object.keys(bufferDistances).forEach(function(distanceKey) {
  var bufferDistance = bufferDistances[distanceKey];
  var bufferSuffix = '_' + distanceKey;
  
  print('');
  print('üìè Processando cen√°rio:', distanceKey);
  print('   Buffer:', bufferDistance/1000, 'km');
  
  // Configurar processamento em chunks
  var chunkSize = 250; // Menor para evitar timeout
  var totalFeatures = sicar_polygons.size();
  var featureList = sicar_polygons.toList(totalFeatures);
  
  print('   Total propriedades:', totalFeatures);
  print('   Chunk size:', chunkSize);
  
  // Processar primeiros 10 chunks para valida√ß√£o
  for (var i = 0; i < 10; i++) {
    var start = i * chunkSize;
    var chunkList = featureList.slice(start, start + chunkSize);
    var chunk = ee.FeatureCollection(chunkList);
    
    // Aplicar an√°lise de extra√ß√£o de dados
    var chunkResult = chunk.map(function(polygon) {
      // Criar buffer
      var buffered = polygon.buffer(bufferDistance);
      
      // Extrair hectares por classe
      var landUseResults = extractLandUseAreas(polygon, buffered, bufferSuffix);
      
      // Calcular dist√¢ncias de infraestrutura (uma vez por propriedade)
      var infraResults = (distanceKey === '10km') ? 
        calculateInfrastructureDistances(polygon) : {};
      
      // Combinar resultados
      return polygon.set(landUseResults).set(infraResults);
    });
    
    // Exportar para Drive
    Export.table.toDrive({
      collection: chunkResult,
      description: 'CP2B_RAW_DATA_' + distanceKey + '_Chunk_' + String(i).padStart(2, '0'),
      fileFormat: 'CSV',
      folder: 'CP2B_Raw_Data'
    });
    
    print('   ‚úÖ Chunk', i, '- Export queued');
  }
});

// =============================================================================
// PHASE 6: RELAT√ìRIO DE EXTRA√á√ÉO
// =============================================================================
print('');
print('=== RELAT√ìRIO DE EXTRA√á√ÉO ===');
print('');
print('üìä DADOS A SEREM EXTRA√çDOS:');
print('');
print('üå± √ÅREAS POR CULTURA (hectares):');
Object.keys(landUseClasses).forEach(function(key) {
  var landUse = landUseClasses[key];
  print('   ‚Ä¢ ' + landUse.name + '_ha_[10km|30km|50km]');
});
print('');
print('üèóÔ∏è DIST√ÇNCIAS DE INFRAESTRUTURA (km):');
Object.keys(infrastructure).forEach(function(key) {
  var infra = infrastructure[key];
  print('   ‚Ä¢ dist_' + key + '_km');
});
print('');
print('üìÅ ARQUIVOS DE SA√çDA:');
print('   Pasta: CP2B_Raw_Data/');
print('   Formato: CP2B_RAW_DATA_[10km|30km|50km]_Chunk_XX.csv');
print('');
print('üîÑ PR√ìXIMOS PASSOS (JUPYTER NOTEBOOK):');
print('   1. Consolidar chunks em arquivo √∫nico por dist√¢ncia');
print('   2. Aplicar fatores de convers√£o por cultura:');
print('      ‚Ä¢ Pastagem: 150-300 Nm¬≥/ton dejetos');
print('      ‚Ä¢ Cana: 94 Nm¬≥/ton (70.23 ton/ha produtividade)');
print('      ‚Ä¢ Caf√©: 310 Nm¬≥/ton (10.43 ton/ha produtividade)');
print('      ‚Ä¢ Soja: 215 Nm¬≥/ton (2.84 ton/ha produtividade)');
print('      ‚Ä¢ Citros: 20.9 Nm¬≥/ton (99 ton/ha produtividade)');
print('   3. Calcular potencial de biomassa por cen√°rio');
print('   4. Implementar scores MCDA');
print('   5. An√°lise comparativa 10km vs 30km vs 50km');
print('');
print('‚úÖ GOOGLE EARTH ENGINE - EXTRA√á√ÉO CONFIGURADA!');
print('‚è≥ Aguardando processamento dos exports...');

// =============================================================================
// PHASE 7: VISUALIZA√á√ÉO PARA VALIDA√á√ÉO
// =============================================================================
Map.centerObject(rmc_boundary, 10);
Map.addLayer(rmc_boundary, {color: 'red', fillColor: 'transparent'}, 'RMC Boundary');

// Adicionar amostra de propriedades para valida√ß√£o
Map.addLayer(sicar_polygons.limit(50), {color: 'blue', fillColor: 'transparent'}, 'SICAR Sample (50)');

// Adicionar layers de uso do solo
Object.keys(landUseClasses).forEach(function(landUseKey) {
  var landUse = landUseClasses[landUseKey];
  var classMask = mapbiomas.eq(landUse.class);
  
  Map.addLayer(classMask.selfMask(), {
    palette: ['green'],
    opacity: 0.7
  }, landUse.name + ' (Classe ' + landUse.class + ')', false);
});

print('üó∫Ô∏è Layers adicionados para valida√ß√£o visual');
print('üìç Use o mapa para verificar distribui√ß√£o das culturas na RMC');